set /augeas/context /files/Config.plist/plist/dict

# ACPI Section
defvar ACPI dict[preceding-sibling::key[#text='ACPI']][1]

## Add
defvar ACPI_Add $ACPI/array[preceding-sibling::key[#text='Add']][1]

set $ACPI_Add/dict/string[following-sibling::string[#text="SSDT-AC.aml"]]/#text "Patched AC Adapter"
set $ACPI_Add/dict/string[following-sibling::string[#text="SSDT-DEVICE.aml"]]/#text "Virtual devices for macOS"
set $ACPI_Add/dict/string[following-sibling::string[#text="SSDT-EC.aml"]]/#text "EC Read and Write Access"
set $ACPI_Add/dict/string[following-sibling::string[#text="SSDT-HPET.aml"]]/#text "Patched HPET"
set $ACPI_Add/dict/string[following-sibling::string[#text="SSDT-KBD.aml"]]/#text "TrackPad, TrackPoint Patched"
set $ACPI_Add/dict/string[following-sibling::string[#text="SSDT-PM.aml"]]/#text "System Power Management"
set $ACPI_Add/dict/string[following-sibling::string[#text="SSDT-PNLF.aml"]]/#text "Smooth Brightness Adjustment"
set $ACPI_Add/dict/string[following-sibling::string[#text="SSDT-PTWK.aml"]]/#text "Fixes Sleep and Wake issues"
set $ACPI_Add/dict/string[following-sibling::string[#text="SSDT-THINK.aml"]]/#text "ThinkSMC"
set $ACPI_Add/dict/string[following-sibling::string[#text="SSDT-XOSI.aml"]] ""

# Disable SSDT-PTWK.aml
# defvar SSDT_PTWK $ACPI_Add/dict/string[#text="SSDT-PTWK.aml"]/..
# ins false after $SSDT_PTWK/#text[preceding-sibling::key[#text="Enabled"]][1]
# set $SSDT_PTWK/false[preceding-sibling::key[#text="Enabled"]][1] "#empty"
# rm $SSDT_PTWK/true[preceding-sibling::key[#text="Enabled"]][1]

## Delete

defvar ACPI_Delete $ACPI/array[preceding-sibling::key[#text='Delete']][1]

# https://dortania.github.io/OpenCore-Install-Guide/config.plist/ivy-bridge.html#acpi
defvar ACPI_Delete_CpuPm $ACPI_Delete/dict/data[preceding-sibling::key[#text="OemTableId"]][#text="Q3B1UG0AAAA="]/..
rm $ACPI_Delete_CpuPm/false[preceding-sibling::key[#text="All"]][1]
ins true after $ACPI_Delete_CpuPm/#text[preceding-sibling::key[#text="All"]][1]
set $ACPI_Delete_CpuPm/true[preceding-sibling::key[#text="All"]][1] "#empty"
rm $ACPI_Delete_CpuPm/false[preceding-sibling::key[#text="Enabled"]][1]
ins true after $ACPI_Delete_CpuPm/#text[preceding-sibling::key[#text="Enabled"]][1]
set $ACPI_Delete_CpuPm/true[preceding-sibling::key[#text="Enabled"]][1] "#empty"

defvar ACPI_Delete_Cpu0Ist $ACPI_Delete/dict/data[preceding-sibling::key[#text="OemTableId"]][#text="Q3B1MElzdAA="]/..
rm $ACPI_Delete_Cpu0Ist/false[preceding-sibling::key[#text="All"]][1]
ins true after $ACPI_Delete_Cpu0Ist/#text[preceding-sibling::key[#text="All"]][1]
set $ACPI_Delete_Cpu0Ist/true[preceding-sibling::key[#text="All"]][1] "#empty"
rm $ACPI_Delete_Cpu0Ist/false[preceding-sibling::key[#text="Enabled"]][1]
ins true after $ACPI_Delete_Cpu0Ist/#text[preceding-sibling::key[#text="Enabled"]][1]
set $ACPI_Delete_Cpu0Ist/true[preceding-sibling::key[#text="Enabled"]][1] "#empty"

## Patch

defvar ACPI_Patch $ACPI/array[preceding-sibling::key[#text='Patch']][1]

# Entries from SSDTime
defnode mynode $ACPI_Patch/dict[last()+1] ""
set $mynode/key[last()+1]/#text "Base"
set $mynode/string[last()+1] ""
set $mynode/key[last()+1]/#text "BaseSkip"
set $mynode/integer[last()+1]/#text 0
set $mynode/key[last()+1]/#text "Comment"
set $mynode/string[last()+1]/#text "OSIF to XSIF"
set $mynode/key[last()+1]/#text "Count"
set $mynode/integer[last()+1]/#text 0
set $mynode/key[last()+1]/#text "Enabled"
set $mynode/true[last()+1] "#empty"
set $mynode/key[last()+1]/#text "Find"
set $mynode/data[last()+1]/#text "T1NJRg=="
set $mynode/key[last()+1]/#text "Limit"
set $mynode/integer[last()+1]/#text 0
set $mynode/key[last()+1]/#text "Mask"
set $mynode/data[last()+1] ""
set $mynode/key[last()+1]/#text "OemTableId"
set $mynode/data[last()+1] ""
set $mynode/key[last()+1]/#text "Replace"
set $mynode/data[last()+1]/#text "WFNJRg=="
set $mynode/key[last()+1]/#text "ReplaceMask"
set $mynode/data[last()+1] ""
set $mynode/key[last()+1]/#text "Skip"
set $mynode/integer[last()+1]/#text 0
set $mynode/key[last()+1]/#text "TableLength"
set $mynode/integer[last()+1]/#text 0
set $mynode/key[last()+1]/#text "TableSignature"
set $mynode/data[last()+1] ""

defnode mynode $ACPI_Patch/dict[last()+1] ""
set $mynode/key[last()+1]/#text "Base"
set $mynode/string[last()+1] ""
set $mynode/key[last()+1]/#text "BaseSkip"
set $mynode/integer[last()+1]/#text 0
set $mynode/key[last()+1]/#text "Comment"
set $mynode/string[last()+1]/#text "_OSI to XOSI"
set $mynode/key[last()+1]/#text "Count"
set $mynode/integer[last()+1]/#text 0
set $mynode/key[last()+1]/#text "Enabled"
set $mynode/true[last()+1] "#empty"
set $mynode/key[last()+1]/#text "Find"
set $mynode/data[last()+1]/#text "X09TSQ=="
set $mynode/key[last()+1]/#text "Limit"
set $mynode/integer[last()+1]/#text 0
set $mynode/key[last()+1]/#text "Mask"
set $mynode/data[last()+1] ""
set $mynode/key[last()+1]/#text "OemTableId"
set $mynode/data[last()+1] ""
set $mynode/key[last()+1]/#text "Replace"
set $mynode/data[last()+1]/#text "WE9TSQ=="
set $mynode/key[last()+1]/#text "ReplaceMask"
set $mynode/data[last()+1] ""
set $mynode/key[last()+1]/#text "Skip"
set $mynode/integer[last()+1]/#text 0
set $mynode/key[last()+1]/#text "TableLength"
set $mynode/integer[last()+1]/#text 0
set $mynode/key[last()+1]/#text "TableSignature"
set $mynode/data[last()+1] ""

defnode mynode $ACPI_Patch/dict[last()+1] ""
set $mynode/key[last()+1]/#text "Base"
set $mynode/string[last()+1] ""
set $mynode/key[last()+1]/#text "BaseSkip"
set $mynode/integer[last()+1]/#text 0
set $mynode/key[last()+1]/#text "Comment"
set $mynode/string[last()+1]/#text "_DSM to XDSM"
set $mynode/key[last()+1]/#text "Count"
set $mynode/integer[last()+1]/#text 0
set $mynode/key[last()+1]/#text "Enabled"
set $mynode/true[last()+1] "#empty"
set $mynode/key[last()+1]/#text "Find"
set $mynode/data[last()+1]/#text "X0RTTQ=="
set $mynode/key[last()+1]/#text "Limit"
set $mynode/integer[last()+1]/#text 0
set $mynode/key[last()+1]/#text "Mask"
set $mynode/data[last()+1] ""
set $mynode/key[last()+1]/#text "OemTableId"
set $mynode/data[last()+1] ""
set $mynode/key[last()+1]/#text "Replace"
set $mynode/data[last()+1]/#text "WERTTQ=="
set $mynode/key[last()+1]/#text "ReplaceMask"
set $mynode/data[last()+1] ""
set $mynode/key[last()+1]/#text "Skip"
set $mynode/integer[last()+1]/#text 0
set $mynode/key[last()+1]/#text "TableLength"
set $mynode/integer[last()+1]/#text 0
set $mynode/key[last()+1]/#text "TableSignature"
set $mynode/data[last()+1] ""

defnode mynode $ACPI_Patch/dict[last()+1] ""
set $mynode/key[last()+1]/#text "Base"
set $mynode/string[last()+1] ""
set $mynode/key[last()+1]/#text "BaseSkip"
set $mynode/integer[last()+1]/#text 0
set $mynode/key[last()+1]/#text "Comment"
set $mynode/string[last()+1]/#text "HPET _CRS to XCRS"
set $mynode/key[last()+1]/#text "Count"
set $mynode/integer[last()+1]/#text 0
set $mynode/key[last()+1]/#text "Enabled"
set $mynode/true[last()+1] "#empty"
set $mynode/key[last()+1]/#text "Find"
set $mynode/data[last()+1]/#text "IF9DUlM="
set $mynode/key[last()+1]/#text "Limit"
set $mynode/integer[last()+1]/#text 0
set $mynode/key[last()+1]/#text "Mask"
set $mynode/data[last()+1] ""
set $mynode/key[last()+1]/#text "OemTableId"
set $mynode/data[last()+1] ""
set $mynode/key[last()+1]/#text "Replace"
set $mynode/data[last()+1]/#text "IFhDUlM="
set $mynode/key[last()+1]/#text "ReplaceMask"
set $mynode/data[last()+1] ""
set $mynode/key[last()+1]/#text "Skip"
set $mynode/integer[last()+1]/#text 0
set $mynode/key[last()+1]/#text "TableLength"
set $mynode/integer[last()+1]/#text 0
set $mynode/key[last()+1]/#text "TableSignature"
set $mynode/data[last()+1] ""

defnode mynode $ACPI_Patch/dict[last()+1] ""
set $mynode/key[last()+1]/#text "Base"
set $mynode/string[last()+1] ""
set $mynode/key[last()+1]/#text "BaseSkip"
set $mynode/integer[last()+1]/#text 0
set $mynode/key[last()+1]/#text "Comment"
set $mynode/string[last()+1]/#text "TIMR IRQ 0 Patch"
set $mynode/key[last()+1]/#text "Count"
set $mynode/integer[last()+1]/#text 0
set $mynode/key[last()+1]/#text "Enabled"
set $mynode/true[last()+1] "#empty"
set $mynode/key[last()+1]/#text "Find"
set $mynode/data[last()+1]/#text "IgEAeQA="
set $mynode/key[last()+1]/#text "Limit"
set $mynode/integer[last()+1]/#text 0
set $mynode/key[last()+1]/#text "Mask"
set $mynode/data[last()+1] ""
set $mynode/key[last()+1]/#text "OemTableId"
set $mynode/data[last()+1] ""
set $mynode/key[last()+1]/#text "Replace"
set $mynode/data[last()+1]/#text "IgAAeQA="
set $mynode/key[last()+1]/#text "ReplaceMask"
set $mynode/data[last()+1] ""
set $mynode/key[last()+1]/#text "Skip"
set $mynode/integer[last()+1]/#text 0
set $mynode/key[last()+1]/#text "TableLength"
set $mynode/integer[last()+1]/#text 0
set $mynode/key[last()+1]/#text "TableSignature"
set $mynode/data[last()+1] ""

defnode mynode $ACPI_Patch/dict[last()+1] ""
set $mynode/key[last()+1]/#text "Base"
set $mynode/string[last()+1] ""
set $mynode/key[last()+1]/#text "BaseSkip"
set $mynode/integer[last()+1]/#text 0
set $mynode/key[last()+1]/#text "Comment"
set $mynode/string[last()+1]/#text "RTC IRQ 8 Patch"
set $mynode/key[last()+1]/#text "Count"
set $mynode/integer[last()+1]/#text 0
set $mynode/key[last()+1]/#text "Enabled"
set $mynode/true[last()+1] "#empty"
set $mynode/key[last()+1]/#text "Find"
set $mynode/data[last()+1]/#text "IgABeQA="
set $mynode/key[last()+1]/#text "Limit"
set $mynode/integer[last()+1]/#text 0
set $mynode/key[last()+1]/#text "Mask"
set $mynode/data[last()+1] ""
set $mynode/key[last()+1]/#text "OemTableId"
set $mynode/data[last()+1] ""
set $mynode/key[last()+1]/#text "Replace"
set $mynode/data[last()+1]/#text "IgAAeQA="
set $mynode/key[last()+1]/#text "ReplaceMask"
set $mynode/data[last()+1] ""
set $mynode/key[last()+1]/#text "Skip"
set $mynode/integer[last()+1]/#text 0
set $mynode/key[last()+1]/#text "TableLength"
set $mynode/integer[last()+1]/#text 0
set $mynode/key[last()+1]/#text "TableSignature"
set $mynode/data[last()+1] ""

defnode mynode $ACPI_Patch/dict[last()+1] ""
set $mynode/key[last()+1]/#text "Base"
set $mynode/string[last()+1] ""
set $mynode/key[last()+1]/#text "BaseSkip"
set $mynode/integer[last()+1]/#text 0
set $mynode/key[last()+1]/#text "Comment"
set $mynode/string[last()+1]/#text "EHC1 to EH01"
set $mynode/key[last()+1]/#text "Count"
set $mynode/integer[last()+1]/#text 0
set $mynode/key[last()+1]/#text "Enabled"
set $mynode/true[last()+1] "#empty"
set $mynode/key[last()+1]/#text "Find"
set $mynode/data[last()+1]/#text "RUhDMQ=="
set $mynode/key[last()+1]/#text "Limit"
set $mynode/integer[last()+1]/#text 0
set $mynode/key[last()+1]/#text "Mask"
set $mynode/data[last()+1] ""
set $mynode/key[last()+1]/#text "OemTableId"
set $mynode/data[last()+1] ""
set $mynode/key[last()+1]/#text "Replace"
set $mynode/data[last()+1]/#text "RUgwMQ=="
set $mynode/key[last()+1]/#text "ReplaceMask"
set $mynode/data[last()+1] ""
set $mynode/key[last()+1]/#text "Skip"
set $mynode/integer[last()+1]/#text 0
set $mynode/key[last()+1]/#text "TableLength"
set $mynode/integer[last()+1]/#text 0
set $mynode/key[last()+1]/#text "TableSignature"
set $mynode/data[last()+1] ""

defnode mynode $ACPI_Patch/dict[last()+1] ""
set $mynode/key[last()+1]/#text "Base"
set $mynode/string[last()+1] ""
set $mynode/key[last()+1]/#text "BaseSkip"
set $mynode/integer[last()+1]/#text 0
set $mynode/key[last()+1]/#text "Comment"
set $mynode/string[last()+1]/#text "EHC2 to EH02"
set $mynode/key[last()+1]/#text "Count"
set $mynode/integer[last()+1]/#text 0
set $mynode/key[last()+1]/#text "Enabled"
set $mynode/true[last()+1] "#empty"
set $mynode/key[last()+1]/#text "Find"
set $mynode/data[last()+1]/#text "RUhDMg=="
set $mynode/key[last()+1]/#text "Limit"
set $mynode/integer[last()+1]/#text 0
set $mynode/key[last()+1]/#text "Mask"
set $mynode/data[last()+1] ""
set $mynode/key[last()+1]/#text "OemTableId"
set $mynode/data[last()+1] ""
set $mynode/key[last()+1]/#text "Replace"
set $mynode/data[last()+1]/#text "RUgwMg=="
set $mynode/key[last()+1]/#text "ReplaceMask"
set $mynode/data[last()+1] ""
set $mynode/key[last()+1]/#text "Skip"
set $mynode/integer[last()+1]/#text 0
set $mynode/key[last()+1]/#text "TableLength"
set $mynode/integer[last()+1]/#text 0
set $mynode/key[last()+1]/#text "TableSignature"
set $mynode/data[last()+1] ""

defnode mynode $ACPI_Patch/dict[last()+1] ""
set $mynode/key[last()+1]/#text "Base"
set $mynode/string[last()+1] ""
set $mynode/key[last()+1]/#text "BaseSkip"
set $mynode/integer[last()+1]/#text 0
set $mynode/key[last()+1]/#text "Comment"
set $mynode/string[last()+1]/#text "Name (NBCF, 0x00) to (NBCF, 0x01)"
set $mynode/key[last()+1]/#text "Count"
set $mynode/integer[last()+1]/#text 0
set $mynode/key[last()+1]/#text "Enabled"
set $mynode/true[last()+1] "#empty"
set $mynode/key[last()+1]/#text "Find"
set $mynode/data[last()+1]/#text "CE5CQ0YKAA=="
set $mynode/key[last()+1]/#text "Limit"
set $mynode/integer[last()+1]/#text 0
set $mynode/key[last()+1]/#text "Mask"
set $mynode/data[last()+1] ""
set $mynode/key[last()+1]/#text "OemTableId"
set $mynode/data[last()+1] ""
set $mynode/key[last()+1]/#text "Replace"
set $mynode/data[last()+1]/#text "CE5CQ0YKAQ=="
set $mynode/key[last()+1]/#text "ReplaceMask"
set $mynode/data[last()+1] ""
set $mynode/key[last()+1]/#text "Skip"
set $mynode/integer[last()+1]/#text 0
set $mynode/key[last()+1]/#text "TableLength"
set $mynode/integer[last()+1]/#text 0
set $mynode/key[last()+1]/#text "TableSignature"
set $mynode/data[last()+1] ""

defvar PlatformInfo dict[preceding-sibling::key[#text='PlatformInfo']][1]
defvar SystemProductName $PlatformInfo/dict/string[preceding-sibling::key[#text='SystemProductName']][1]

# Set PlatformInfo
set $SystemProductName/#text "MacBookPro11,1"
